import { Context, Markup } from 'telegraf';
import { apiService } from '../services/apiService';
import { userService } from '../services/userService';
import { openaiService } from '../services/openaiService';
import { getUserInfo, handleError, logUserAction, escapeMarkdown } from '../utils/helpers';
import { WellnessInterview, ConversationMessage } from '../types';
import { logger } from '../utils/logger';

export class WellnessHandler {
  // Check if user has completed wellness interview
  static async checkWellnessInterview(ctx: Context): Promise<boolean> {
    try {
      const userInfo = getUserInfo(ctx);
      const token = userService.getApiToken(userInfo.id.toString());

      if (!token) {
        return false;
      }

      const interviews = await apiService.getWellnessInterviews(token);
      const completedInterview = interviews.find(interview => interview.status === 'completed');

      return !!completedInterview;

    } catch (error) {
      logger.error('Error checking wellness interview', error);
      return false;
    }
  }

  // Start wellness interview process
  static async startWellnessInterview(ctx: Context): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      const token = userService.getApiToken(userInfo.id.toString());

      if (!token) {
        await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.');
        return;
      }

      if (!openaiService.isAvailable()) {
        await ctx.reply('‚ùå Wellness-–∫–æ—É—á–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      logUserAction(ctx, 'start_wellness_interview');

      // Check if user already has an interview
      const interviews = await apiService.getWellnessInterviews(token);
      let currentInterview = interviews.find(interview => 
        interview.status === 'in_progress' || interview.status === 'pending'
      );

      if (!currentInterview) {
        // Create new wellness interview
        currentInterview = await apiService.createWellnessInterview(token, {
          status: 'in_progress',
          conversation_history: []
        });
      }

      // Set user state for wellness interview
      userService.setUser(userInfo.id.toString(), {
        wellnessInterviewId: currentInterview.id,
        wellnessInterviewActive: true
      });

      await ctx.reply(
        'üåø *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ wellness-–∏–Ω—Ç–µ—Ä–≤—å—é!*\n\n' +
        '–Ø –ø–æ–¥–∫–ª—é—á—É –≤–∞—Å –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É wellness-–∫–æ—É—á—É, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç ' +
        '—Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏ –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.\n\n' +
        '‚è≥ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –∫–æ—É—á—É...',
        { parse_mode: 'Markdown' }
      );

      // Start conversation with wellness coach
      await this.continueWellnessConversation(ctx, '–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é.');

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ wellness-–∏–Ω—Ç–µ—Ä–≤—å—é');
    }
  }

  // Continue wellness conversation
  static async continueWellnessConversation(ctx: Context, userMessage: string): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      const token = userService.getApiToken(userInfo.id.toString());
      const user = userService.getUser(userInfo.id.toString());

      if (!token || !user?.wellnessInterviewId) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è wellness-–∏–Ω—Ç–µ—Ä–≤—å—é. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /wellness');
        return;
      }

      await ctx.reply('‚è≥ –ö–æ—É—á –æ–±–¥—É–º—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç...');

      // Get current interview
      const interview = await apiService.getWellnessInterview(token, user.wellnessInterviewId);
      
      // Add user message to conversation history
      const userMsg: ConversationMessage = {
        role: 'user',
        content: userMessage,
        timestamp: new Date().toISOString()
      };

      const conversationHistory = interview.conversation_history || [];
      conversationHistory.push(userMsg);

      // Generate response from wellness coach
      const coachResponse = await openaiService.generateResponse(conversationHistory);

      // Add coach response to conversation history
      const coachMsg: ConversationMessage = {
        role: 'assistant',
        content: coachResponse,
        timestamp: new Date().toISOString()
      };

      conversationHistory.push(coachMsg);

      // Extract statistics from conversation
      const statistics = openaiService.extractStatistics(conversationHistory);

      // Update interview with new conversation and statistics
      await apiService.updateWellnessInterview(token, user.wellnessInterviewId, {
        conversation_history: conversationHistory,
        statistics: statistics,
        age: statistics.age,
        location: statistics.location,
        contraindications: statistics.contraindications
      });

      // Send coach response to user
      await ctx.reply(
        `üåø *Wellness-–∫–æ—É—á:*\n\n${escapeMarkdown(coachResponse)}`,
        {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é', 'complete_wellness')],
            [Markup.button.callback('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'wellness_stats')]
          ])
        }
      );

      logUserAction(ctx, 'wellness_conversation_turn', {
        interviewId: user.wellnessInterviewId,
        messageLength: userMessage.length,
        responseLength: coachResponse.length
      });

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –≤ wellness-—Ä–∞–∑–≥–æ–≤–æ—Ä–µ');
    }
  }

  // Complete wellness interview
  static async completeWellnessInterview(ctx: Context): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      const token = userService.getApiToken(userInfo.id.toString());
      const user = userService.getUser(userInfo.id.toString());

      if (!token || !user?.wellnessInterviewId) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è wellness-–∏–Ω—Ç–µ—Ä–≤—å—é.');
        return;
      }

      // Update interview status to completed
      const completedInterview = await apiService.updateWellnessInterview(token, user.wellnessInterviewId, {
        status: 'completed',
        completed_at: new Date().toISOString()
      });

      // Clear user wellness interview state
      userService.setUser(userInfo.id.toString(), {
        wellnessInterviewId: undefined,
        wellnessInterviewActive: false
      });

      logUserAction(ctx, 'wellness_interview_completed', {
        interviewId: user.wellnessInterviewId,
        conversationLength: completedInterview.conversation_history?.length || 0
      });

      await ctx.reply(
        '‚úÖ *Wellness-–∏–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n' +
        '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã ' +
        '–¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ wellness-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.',
        {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'wellness_stats')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ])
        }
      );

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ wellness-–∏–Ω—Ç–µ—Ä–≤—å—é');
    }
  }

  // Show wellness statistics
  static async showWellnessStatistics(ctx: Context): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      const token = userService.getApiToken(userInfo.id.toString());

      if (!token) {
        await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.');
        return;
      }

      const interviews = await apiService.getWellnessInterviews(token);
      const completedInterview = interviews.find(interview => interview.status === 'completed');

      if (!completedInterview || !completedInterview.statistics) {
        await ctx.reply(
          'üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ wellness-–∏–Ω—Ç–µ—Ä–≤—å—é.\n\n' +
          '–ü—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.',
          Markup.inlineKeyboard([
            [Markup.button.callback('üåø –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é', 'start_wellness')]
          ])
        );
        return;
      }

      const stats = completedInterview.statistics;
      let message = 'üìä *–í–∞—à–∞ wellness-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n';

      if (stats.age) {
        message += `üë§ –í–æ–∑—Ä–∞—Å—Ç: ${stats.age} –ª–µ—Ç\n`;
      }

      if (stats.location) {
        message += `üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${escapeMarkdown(stats.location)}\n`;
      }

      if (stats.contraindications && stats.contraindications.length > 0) {
        message += `\n‚ö†Ô∏è *–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:*\n`;
        stats.contraindications.slice(0, 3).forEach((item, index) => {
          message += `${index + 1}. ${escapeMarkdown(item)}\n`;
        });
        if (stats.contraindications.length > 3) {
          message += `... –∏ –µ—â–µ ${stats.contraindications.length - 3}\n`;
        }
      }

      if (stats.health_goals && stats.health_goals.length > 0) {
        message += `\nüéØ *–¶–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è:*\n`;
        stats.health_goals.slice(0, 3).forEach((goal, index) => {
          message += `${index + 1}. ${escapeMarkdown(goal)}\n`;
        });
        if (stats.health_goals.length > 3) {
          message += `... –∏ –µ—â–µ ${stats.health_goals.length - 3}\n`;
        }
      }

      if (stats.lifestyle_factors && stats.lifestyle_factors.length > 0) {
        message += `\nüèÉ‚Äç‚ôÇÔ∏è *–§–∞–∫—Ç–æ—Ä—ã –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏:*\n`;
        stats.lifestyle_factors.slice(0, 3).forEach((factor, index) => {
          message += `${index + 1}. ${escapeMarkdown(factor)}\n`;
        });
        if (stats.lifestyle_factors.length > 3) {
          message += `... –∏ –µ—â–µ ${stats.lifestyle_factors.length - 3}\n`;
        }
      }

      message += `\nüìÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date(completedInterview.completed_at!).toLocaleDateString('ru-RU')}`;

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ', 'restart_wellness')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ])
      });

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ wellness-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  // Restart wellness interview
  static async restartWellnessInterview(ctx: Context): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      const token = userService.getApiToken(userInfo.id.toString());

      if (!token) {
        await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.');
        return;
      }

      await ctx.reply(
        'üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ wellness-–∏–Ω—Ç–µ—Ä–≤—å—é*\n\n' +
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é? ' +
        '–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é.',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'confirm_restart_wellness')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_restart_wellness')]
        ])
      );

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ wellness-–∏–Ω—Ç–µ—Ä–≤—å—é');
    }
  }

  // Handle text messages during wellness interview
  static async handleWellnessMessage(ctx: Context, message: string): Promise<void> {
    const userInfo = getUserInfo(ctx);
    const user = userService.getUser(userInfo.id.toString());

    if (user?.wellnessInterviewActive) {
      await this.continueWellnessConversation(ctx, message);
    }
  }
}
