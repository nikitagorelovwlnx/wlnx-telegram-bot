import { Context, Markup } from 'telegraf';
import { userService } from '../services/userService';
import { getUserInfo, handleError, logUserAction, isAdmin } from '../utils/helpers';
import { config } from '../config';

export class CommandHandler {
  // Start command
  static async start(ctx: Context): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      logUserAction(ctx, 'start');

      // Initialize user in service
      userService.setUser(userInfo.id.toString(), {
        telegramId: userInfo.id.toString(),
        username: userInfo.username,
        firstName: userInfo.firstName,
        lastName: userInfo.lastName,
      });

      const isAuthenticated = userService.isAuthenticated(userInfo.id.toString());
      const userName = userInfo.firstName || userInfo.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      if (isAuthenticated) {
        // Check if user has completed wellness interview
        const { WellnessHandler } = await import('./wellnessHandler');
        const hasWellnessInterview = await WellnessHandler.checkWellnessInterview(ctx);

        if (!hasWellnessInterview) {
          await ctx.reply(
            `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${userName}!\n\n` +
            'üåø –Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ wellness-–∏–Ω—Ç–µ—Ä–≤—å—é —Å –Ω–∞—à–∏–º –∫–æ—É—á–µ–º. ' +
            '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è.\n\n' +
            '–•–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é?',
            Markup.inlineKeyboard([
              [Markup.button.callback('üåø –ü—Ä–æ–π—Ç–∏ wellness-–∏–Ω—Ç–µ—Ä–≤—å—é', 'start_wellness')],
              [Markup.button.callback('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_wellness')]
            ])
          );
        } else {
          await ctx.reply(
            `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${userName}!\n\n` +
            'ü§ñ –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π WLNX. –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.',
            Markup.keyboard([
              ['üìä –ú–æ–∏ –∏–Ω—Ç–µ—Ä–≤—å—é', 'üåø Wellness'],
              ['üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
              ['‚ùì –ü–æ–º–æ—â—å']
            ]).resize()
          );
        }
      } else {
        await ctx.reply(
          `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n` +
          'ü§ñ –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π WLNX.\n\n' +
          'üìù –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
          '‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é\n' +
          '‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å wellness-–∏–Ω—Ç–µ—Ä–≤—å—é —Å –ò–ò-–∫–æ—É—á–µ–º\n' +
          '‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º\n' +
          '‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n' +
          'üîë –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:',
          Markup.inlineKeyboard([
            [Markup.button.callback('üîë –í–æ–π—Ç–∏', 'login')],
            [Markup.button.callback('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'register')]
          ])
        );
      }

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞');
    }
  }

  // Help command
  static async help(ctx: Context): Promise<void> {
    try {
      logUserAction(ctx, 'help');

      const isAuthenticated = userService.isAuthenticated(getUserInfo(ctx).id.toString());

      let message = '‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É WLNX*\n\n';

      if (isAuthenticated) {
        message += 'üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n';
        message += 'üîê *–ê–∫–∫–∞—É–Ω—Ç:*\n';
        message += '/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ\n';
        message += '/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n\n';
        
        message += 'üìä *–ò–Ω—Ç–µ—Ä–≤—å—é:*\n';
        message += '/interviews - –ú–æ–∏ –∏–Ω—Ç–µ—Ä–≤—å—é\n';
        message += '/add_interview - –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é\n';
        message += '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é\n\n';
        
        message += 'üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å:*\n';
        message += '/calendar - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è\n\n';
        
        message += '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n';
        message += '/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n';
        message += '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n';
        
        if (isAdmin(getUserInfo(ctx).id)) {
          message += 'üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:*\n';
          message += '/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n';
        }
      } else {
        message += 'üîë *–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:*\n';
        message += '/login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n';
        message += '/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n\n';
      }

      message += 'üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*\n';
      message += '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';

      await ctx.reply(message, { parse_mode: 'Markdown' });

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏');
    }
  }

  // Settings command
  static async settings(ctx: Context): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      
      if (!userService.isAuthenticated(userInfo.id.toString())) {
        await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.');
        return;
      }

      logUserAction(ctx, 'settings');

      await ctx.reply(
        '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:',
        {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications')],
            [Markup.button.callback('üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å', 'settings_calendar')],
            [Markup.button.callback('üåê –Ø–∑—ã–∫', 'settings_language')],
            [Markup.button.callback('üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'settings_security')]
          ])
        }
      );

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
  }

  // Admin panel (for admin users only)
  static async admin(ctx: Context): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      
      if (!isAdmin(userInfo.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      logUserAction(ctx, 'admin_panel');

      const totalUsers = userService.getUserCount();
      const authenticatedUsers = userService.getAuthenticatedUserCount();

      await ctx.reply(
        'üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n' +
        `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
        `üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: ${authenticatedUsers}\n` +
        `ü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 1.0.0\n` +
        `üåê API —Å–µ—Ä–≤–µ—Ä: ${config.apiBaseUrl}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
            [Markup.button.callback('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'admin_users')],
            [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
            [Markup.button.callback('üîß –°–∏—Å—Ç–µ–º–∞', 'admin_system')]
          ])
        }
      );

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
  }

  // Profile command
  static async profile(ctx: Context): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      const token = userService.getApiToken(userInfo.id.toString());

      if (!token) {
        await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.');
        return;
      }

      logUserAction(ctx, 'profile');

      // This will be handled by AuthHandler.checkAuth
      const { AuthHandler } = await import('./authHandler');
      await AuthHandler.checkAuth(ctx);

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  // Handle unknown commands
  static async unknown(ctx: Context): Promise<void> {
    try {
      await ctx.reply(
        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')]
        ])
      );

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  // Handle text messages based on current user state
  static async handleText(ctx: Context): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      const user = userService.getUser(userInfo.id.toString());
      const text = (ctx.message as any)?.text;

      if (!text) return;

      // Handle authentication flow
      if (user?.email && !user.isAuthenticated) {
        const { AuthHandler } = await import('./authHandler');
        await AuthHandler.handlePasswordInput(ctx, text);
        return;
      }

      // Handle wellness interview messages first
      if (user?.wellnessInterviewActive) {
        const { WellnessHandler } = await import('./wellnessHandler');
        await WellnessHandler.handleWellnessMessage(ctx, text);
        return;
      }

      // Handle interview data input
      if (user?.interviewData) {
        const { InterviewHandler } = await import('./interviewHandler');
        
        if (user.interviewData.step === 'score') {
          await InterviewHandler.handleScoreInput(ctx, text);
        } else {
          await InterviewHandler.handleInterviewInput(ctx, text);
        }
        return;
      }

      // Handle keyboard buttons
      switch (text) {
        case 'üìä –ú–æ–∏ –∏–Ω—Ç–µ—Ä–≤—å—é':
          const { InterviewHandler } = await import('./interviewHandler');
          await InterviewHandler.showInterviews(ctx);
          break;

        case 'üåø Wellness':
          const { WellnessHandler } = await import('./wellnessHandler');
          await WellnessHandler.showWellnessStatistics(ctx);
          break;

        case 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å':
          await ctx.reply('üìÖ –§—É–Ω–∫—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.');
          break;

        case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
          await CommandHandler.settings(ctx);
          break;

        case '‚ùì –ü–æ–º–æ—â—å':
          await CommandHandler.help(ctx);
          break;

        default:
          // Check if it looks like an email for login flow
          if (text.includes('@') && !user?.isAuthenticated) {
            const { AuthHandler } = await import('./authHandler');
            await AuthHandler.handleEmailInput(ctx, text);
          } else {
            await ctx.reply(
              'ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n' +
              '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.'
            );
          }
      }

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞');
    }
  }
}
