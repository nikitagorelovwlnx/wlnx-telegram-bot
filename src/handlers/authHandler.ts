import { Context, Markup } from 'telegraf';
import { apiService } from '../services/apiService';
import { userService } from '../services/userService';
import { getUserInfo, handleError, logUserAction, validateEmail, validatePassword } from '../utils/helpers';
import { logger } from '../utils/logger';

export class AuthHandler {
  // Registration flow
  static async startRegistration(ctx: Context): Promise<void> {
    try {
      logUserAction(ctx, 'start_registration');
      
      await ctx.reply(
        'üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ WLNX*\n\n' +
        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:',
        { parse_mode: 'Markdown' }
      );
      
      // Set user state for registration
      const userInfo = getUserInfo(ctx);
      userService.setUser(userInfo.id.toString(), {
        telegramId: userInfo.id.toString(),
        username: userInfo.username,
        firstName: userInfo.firstName,
        lastName: userInfo.lastName,
      });
      
    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
  }

  static async handleEmailInput(ctx: Context, email: string): Promise<void> {
    try {
      if (!validateEmail(email)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        return;
      }

      const userInfo = getUserInfo(ctx);
      userService.setUser(userInfo.id.toString(), { email });
      
      await ctx.reply(
        'üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n\n' +
        '‚Ä¢ –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤\n' +
        '‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã\n' +
        '‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É'
      );
      
    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email');
    }
  }

  static async handlePasswordInput(ctx: Context, password: string): Promise<void> {
    try {
      const validation = validatePassword(password);
      if (!validation.valid) {
        await ctx.reply(`‚ùå ${validation.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        return;
      }

      const userInfo = getUserInfo(ctx);
      const user = userService.getUser(userInfo.id.toString());
      
      if (!user?.email) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /register');
        return;
      }

      await ctx.reply('‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ...');

      try {
        const authResponse = await apiService.registerUser(
          user.email,
          password,
          user.firstName || user.username
        );

        userService.authenticate(
          userInfo.id.toString(),
          authResponse.token,
          authResponse.user.id
        );

        logUserAction(ctx, 'registration_success', { userId: authResponse.user.id });

        await ctx.reply(
          '‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n' +
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${authResponse.user.name || authResponse.user.email}!\n\n` +
          '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.',
          { 
            parse_mode: 'Markdown',
            ...Markup.keyboard([
              ['üìä –ú–æ–∏ –∏–Ω—Ç–µ—Ä–≤—å—é', 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å'],
              ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '‚ùì –ü–æ–º–æ—â—å']
            ]).resize()
          }
        );

      } catch (apiError: any) {
        logger.error('Registration API error', apiError);
        
        if (apiError.status === 409) {
          await ctx.reply(
            '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login'
          );
        } else {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }
      }

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è');
    }
  }

  // Login flow
  static async startLogin(ctx: Context): Promise<void> {
    try {
      logUserAction(ctx, 'start_login');
      
      await ctx.reply(
        'üîë *–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É WLNX*\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:',
        { parse_mode: 'Markdown' }
      );
      
    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤—Ö–æ–¥–∞');
    }
  }

  static async handleLoginPassword(ctx: Context, email: string, password: string): Promise<void> {
    try {
      await ctx.reply('‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...');

      const authResponse = await apiService.loginUser(email, password);
      const userInfo = getUserInfo(ctx);

      userService.authenticate(
        userInfo.id.toString(),
        authResponse.token,
        authResponse.user.id
      );

      // Update user info
      userService.setUser(userInfo.id.toString(), {
        username: userInfo.username,
        firstName: userInfo.firstName,
        lastName: userInfo.lastName,
      });

      logUserAction(ctx, 'login_success', { userId: authResponse.user.id });

      await ctx.reply(
        '‚úÖ *–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n' +
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${authResponse.user.name || authResponse.user.email}!`,
        { 
          parse_mode: 'Markdown',
          ...Markup.keyboard([
            ['üìä –ú–æ–∏ –∏–Ω—Ç–µ—Ä–≤—å—é', 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å'],
            ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '‚ùì –ü–æ–º–æ—â—å']
          ]).resize()
        }
      );

    } catch (apiError: any) {
      logger.error('Login API error', apiError);
      
      if (apiError.status === 401) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      }
    }
  }

  // Logout
  static async logout(ctx: Context): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      
      if (!userService.isAuthenticated(userInfo.id.toString())) {
        await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
        return;
      }

      userService.logout(userInfo.id.toString());
      logUserAction(ctx, 'logout');

      await ctx.reply(
        'üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n' +
        '–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login',
        Markup.removeKeyboard()
      );

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
    }
  }

  // Check authentication status
  static async checkAuth(ctx: Context): Promise<void> {
    try {
      const userInfo = getUserInfo(ctx);
      const isAuth = userService.isAuthenticated(userInfo.id.toString());
      
      if (isAuth) {
        const user = userService.getUser(userInfo.id.toString());
        const token = userService.getApiToken(userInfo.id.toString());
        
        if (token) {
          try {
            const apiUser = await apiService.getCurrentUser(token);
            await ctx.reply(
              '‚úÖ *–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ*\n\n' +
              `üë§ –ò–º—è: ${apiUser.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
              `üìß Email: ${apiUser.email}\n` +
              `üÜî ID: ${apiUser.id}\n` +
              `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(apiUser.created_at).toLocaleDateString('ru-RU')}`,
              { parse_mode: 'Markdown' }
            );
          } catch (apiError) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.');
            userService.logout(userInfo.id.toString());
          }
        }
      } else {
        await ctx.reply(
          '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
        );
      }

    } catch (error) {
      handleError(ctx, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  }
}
