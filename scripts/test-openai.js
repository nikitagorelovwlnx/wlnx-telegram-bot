#!/usr/bin/env node

const OpenAI = require('openai');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

async function testOpenAI() {
  const apiKey = process.env.OPENAI_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª');
    process.exit(1);
  }

  console.log('üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω');
  
  const openai = new OpenAI({
    apiKey: apiKey,
  });

  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º GPT-4...');
    const response4 = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        { role: 'user', content: 'Hello, say "GPT-4 works!"' }
      ],
      max_tokens: 50
    });
    
    console.log('‚úÖ GPT-4 —Ä–∞–±–æ—Ç–∞–µ—Ç:', response4.choices[0]?.message?.content);
    
  } catch (error) {
    console.error('‚ùå GPT-4 –æ—à–∏–±–∫–∞:', error.message);
  }

  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º GPT-5...');
    const response5 = await openai.chat.completions.create({
      model: 'gpt-5',
      messages: [
        { role: 'user', content: 'Hello, say "GPT-5 works!"' }
      ],
      max_completion_tokens: 50 // GPT-5 uses max_completion_tokens
    });
    
    console.log('‚úÖ GPT-5 —Ä–∞–±–æ—Ç–∞–µ—Ç:', response5.choices[0]?.message?.content);
    
  } catch (error) {
    console.error('‚ùå GPT-5 –æ—à–∏–±–∫–∞:', error.message);
    if (error.message.includes('model')) {
      console.log('üí° GPT-5 –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GPT-4');
    }
  }
}

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ OpenAI API...\n');
testOpenAI().catch(console.error);
